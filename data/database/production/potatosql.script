SET DATABASE UNIQUE NAME HSQLDB6A6FB412A8
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL RESTRICT EXEC FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL SYS INDEX NAMES FALSE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
SET FILES CHECK 185981
SET DATABASE COLLATION "SQL_TEXT" PAD SPACE
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE FUNCTION PUBLIC.GENERATE_ID() RETURNS INTEGER SPECIFIC GENERATE_ID_10298 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_ID INTEGER;SELECT SUBSTRING(''+RAND(),4,5)INTO V_ID FROM(VALUES(0));RETURN V_ID;END
CREATE MEMORY TABLE PUBLIC.DATABASE_SCHEMA(SCHEMA_ID INTEGER,SCHEMA_NAME VARCHAR(16777216),CONSTRAINT DATABASE_SCHEMA_PRIMARYKEY PRIMARY KEY(SCHEMA_ID))
CREATE MEMORY TABLE PUBLIC.DATABASE_TABLE(SCHEMA_ID INTEGER,TABLE_ID INTEGER,TABLE_NAME VARCHAR(16777216),CONSTRAINT DATABASE_TABLE_PRIMARYKEY PRIMARY KEY(SCHEMA_ID,TABLE_ID),CONSTRAINT R0_DATABASE_SCHEMA_DATABASE_TABLE FOREIGN KEY(SCHEMA_ID) REFERENCES PUBLIC.DATABASE_SCHEMA(SCHEMA_ID) ON DELETE CASCADE)
CREATE MEMORY TABLE PUBLIC.TABLE_KEY(SCHEMA_ID INTEGER,TABLE_ID INTEGER,TABLE_KEY_ID INTEGER,TABLE_KEY_NAME VARCHAR(16777216),TABLE_KEY_LABEL VARCHAR(16777216),TABLE_KEY_IS_PK BOOLEAN,TABLE_KEY_TYPE_ID INTEGER,TABLE_KEY_ORDER INTEGER,CONSTRAINT TABLE_KEY_PRIMARYKEY PRIMARY KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID),CONSTRAINT R1_DATABASE_TABLE_TABLE_KEY FOREIGN KEY(SCHEMA_ID,TABLE_ID) REFERENCES PUBLIC.DATABASE_TABLE(SCHEMA_ID,TABLE_ID) ON DELETE CASCADE)
CREATE MEMORY TABLE PUBLIC.KEY_TYPE(KEY_TYPE_ID INTEGER,KEY_TYPE_NAME VARCHAR(16777216),CONSTRAINT KEY_TYPE_PRIMARYKEY PRIMARY KEY(KEY_TYPE_ID))
CREATE MEMORY TABLE PUBLIC.RELATIONSHIP_TYPE(RELATIONSHIP_TYPE_ID INTEGER,RELATIONSHIP_TYPE_NAME VARCHAR(16777216),CONSTRAINT RELATIONSHIP_TYPE_PRIMARYKEY PRIMARY KEY(RELATIONSHIP_TYPE_ID))
CREATE MEMORY TABLE PUBLIC.RELATIONSHIP(SCHEMA_ID INTEGER,PARENT_TABLE_ID INTEGER,CHILD_TABLE_ID INTEGER,RELATIONSHIP_ID INTEGER,RELATIONSHIP_TYPE_ID INTEGER,CONSTRAINT RELATIONSHIP_PRIMARYKEY PRIMARY KEY(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID),CONSTRAINT R2_DATABASE_TABLE_RELATIONSHIP FOREIGN KEY(SCHEMA_ID,PARENT_TABLE_ID) REFERENCES PUBLIC.DATABASE_TABLE(SCHEMA_ID,TABLE_ID) ON DELETE CASCADE,CONSTRAINT R3_DATABASE_TABLE_RELATIONSHIP FOREIGN KEY(SCHEMA_ID,CHILD_TABLE_ID) REFERENCES PUBLIC.DATABASE_TABLE(SCHEMA_ID,TABLE_ID) ON DELETE CASCADE,CONSTRAINT R7_RELATIONSHIP_TYPE_RELATIONSHIP FOREIGN KEY(RELATIONSHIP_TYPE_ID) REFERENCES PUBLIC.RELATIONSHIP_TYPE(RELATIONSHIP_TYPE_ID) ON DELETE SET NULL)
CREATE MEMORY TABLE PUBLIC.RELATIONSHIP_KEY_PAIR(SCHEMA_ID INTEGER,PARENT_TABLE_ID INTEGER,CHILD_TABLE_ID INTEGER,RELATIONSHIP_ID INTEGER,PARENT_KEY_ID INTEGER,CHILD_KEY_ID INTEGER,CONSTRAINT RELATIONSHIP_KEY_PAIR_PRIMARYKEY PRIMARY KEY(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID),CONSTRAINT R4_TABLE_KEY_RELATIONSHIP_KEY_PAIR FOREIGN KEY(SCHEMA_ID,PARENT_TABLE_ID,PARENT_KEY_ID) REFERENCES PUBLIC.TABLE_KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID) ON DELETE CASCADE,CONSTRAINT R5_TABLE_KEY_RELATIONSHIP_KEY_PAIR FOREIGN KEY(SCHEMA_ID,CHILD_TABLE_ID,CHILD_KEY_ID) REFERENCES PUBLIC.TABLE_KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID) ON DELETE CASCADE,CONSTRAINT R8_RELATIONSHIP_RELATIONSHIP_KEY_PAIR FOREIGN KEY(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID) REFERENCES PUBLIC.RELATIONSHIP(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID) ON DELETE CASCADE)
CREATE PROCEDURE PUBLIC.DATABASE_SCHEMA_INSERT(IN V_SCHEMA_ID INTEGER,IN V_SCHEMA_NAME VARCHAR(16777216)) SPECIFIC DATABASE_SCHEMA_INSERT_10235 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASE_SCHEMA(SCHEMA_ID,SCHEMA_NAME)VALUES(V_SCHEMA_ID,V_SCHEMA_NAME);END
CREATE PROCEDURE PUBLIC.DATABASE_SCHEMA_UPDATE(IN V_SCHEMA_ID INTEGER,IN V_SCHEMA_NAME VARCHAR(16777216)) SPECIFIC DATABASE_SCHEMA_UPDATE_10236 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASE_SCHEMA SET SCHEMA_NAME=V_SCHEMA_NAME WHERE SCHEMA_ID=V_SCHEMA_ID;END
CREATE PROCEDURE PUBLIC.DATABASE_SCHEMA_DELETE(IN V_SCHEMA_ID INTEGER) SPECIFIC DATABASE_SCHEMA_DELETE_10237 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASE_SCHEMA WHERE SCHEMA_ID=V_SCHEMA_ID;END
CREATE PROCEDURE PUBLIC.DATABASE_SCHEMA_SELECT_ALL() SPECIFIC DATABASE_SCHEMA_SELECT_ALL_10239 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,SCHEMA_NAME FROM PUBLIC.DATABASE_SCHEMA ORDER BY SCHEMA_NAME;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_INSERT(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_NAME VARCHAR(16777216)) SPECIFIC DATABASE_TABLE_INSERT_10240 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASE_TABLE(SCHEMA_ID,TABLE_ID,TABLE_NAME)VALUES(V_SCHEMA_ID,V_TABLE_ID,V_TABLE_NAME);END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_UPDATE(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_NAME VARCHAR(16777216)) SPECIFIC DATABASE_TABLE_UPDATE_10241 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.DATABASE_TABLE SET TABLE_NAME=V_TABLE_NAME WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID;END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_DELETE(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) SPECIFIC DATABASE_TABLE_DELETE_10242 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.DATABASE_TABLE WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID;END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_SELECT(IN V_SCHEMA_ID INTEGER) SPECIFIC DATABASE_TABLE_SELECT_10244 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_NAME FROM PUBLIC.DATABASE_TABLE WHERE SCHEMA_ID=V_SCHEMA_ID ORDER BY TABLE_NAME;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_SELECT(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) SPECIFIC DATABASE_TABLE_SELECT_10246 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_NAME FROM PUBLIC.DATABASE_TABLE WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_INSERT(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_KEY_ID INTEGER,IN V_TABLE_KEY_NAME VARCHAR(16777216),IN V_TABLE_KEY_LABEL VARCHAR(16777216),IN V_TABLE_KEY_IS_PK BOOLEAN,IN V_TABLE_KEY_TYPE_ID INTEGER,IN V_TABLE_KEY_ORDER INTEGER) SPECIFIC TABLE_KEY_INSERT_10247 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLE_KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER)VALUES(V_SCHEMA_ID,V_TABLE_ID,V_TABLE_KEY_ID,V_TABLE_KEY_NAME,V_TABLE_KEY_LABEL,V_TABLE_KEY_IS_PK,V_TABLE_KEY_TYPE_ID,V_TABLE_KEY_ORDER);END
CREATE PROCEDURE PUBLIC.TABLE_KEY_UPDATE(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_KEY_ID INTEGER,IN V_TABLE_KEY_NAME VARCHAR(16777216),IN V_TABLE_KEY_LABEL VARCHAR(16777216),IN V_TABLE_KEY_IS_PK BOOLEAN,IN V_TABLE_KEY_TYPE_ID INTEGER,IN V_TABLE_KEY_ORDER INTEGER) SPECIFIC TABLE_KEY_UPDATE_10248 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.TABLE_KEY SET TABLE_KEY_NAME=V_TABLE_KEY_NAME,TABLE_KEY_LABEL=V_TABLE_KEY_LABEL,TABLE_KEY_IS_PK=V_TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID=V_TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER=V_TABLE_KEY_ORDER WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID AND TABLE_KEY_ID=V_TABLE_KEY_ID;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_DELETE(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_KEY_ID INTEGER) SPECIFIC TABLE_KEY_DELETE_10249 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID AND TABLE_KEY_ID=V_TABLE_KEY_ID;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_SELECT(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) SPECIFIC TABLE_KEY_SELECT_10251 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_SELECT(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER,IN V_TABLE_KEY_ID INTEGER) SPECIFIC TABLE_KEY_SELECT_10253 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID AND TABLE_KEY_ID=V_TABLE_KEY_ID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_SELECT_PK(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) SPECIFIC TABLE_KEY_SELECT_PK_10255 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID AND TABLE_KEY_IS_PK=TRUE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_SELECT_NPK(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) SPECIFIC TABLE_KEY_SELECT_NPK_10257 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID AND TABLE_KEY_IS_PK=FALSE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.KEY_TYPE_INSERT(IN V_KEY_TYPE_ID INTEGER,IN V_KEY_TYPE_NAME VARCHAR(16777216)) SPECIFIC KEY_TYPE_INSERT_10258 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.KEY_TYPE(KEY_TYPE_ID,KEY_TYPE_NAME)VALUES(V_KEY_TYPE_ID,V_KEY_TYPE_NAME);END
CREATE PROCEDURE PUBLIC.KEY_TYPE_UPDATE(IN V_KEY_TYPE_ID INTEGER,IN V_KEY_TYPE_NAME VARCHAR(16777216)) SPECIFIC KEY_TYPE_UPDATE_10259 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.KEY_TYPE SET KEY_TYPE_NAME=V_KEY_TYPE_NAME WHERE KEY_TYPE_ID=V_KEY_TYPE_ID;END
CREATE PROCEDURE PUBLIC.KEY_TYPE_DELETE(IN V_KEY_TYPE_ID INTEGER) SPECIFIC KEY_TYPE_DELETE_10260 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.KEY_TYPE WHERE KEY_TYPE_ID=V_KEY_TYPE_ID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_TYPE_INSERT(IN V_RELATIONSHIP_TYPE_ID INTEGER,IN V_RELATIONSHIP_TYPE_NAME VARCHAR(16777216)) SPECIFIC RELATIONSHIP_TYPE_INSERT_10261 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP_TYPE(RELATIONSHIP_TYPE_ID,RELATIONSHIP_TYPE_NAME)VALUES(V_RELATIONSHIP_TYPE_ID,V_RELATIONSHIP_TYPE_NAME);END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_TYPE_UPDATE(IN V_RELATIONSHIP_TYPE_ID INTEGER,IN V_RELATIONSHIP_TYPE_NAME VARCHAR(16777216)) SPECIFIC RELATIONSHIP_TYPE_UPDATE_10262 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC UPDATE PUBLIC.RELATIONSHIP_TYPE SET RELATIONSHIP_TYPE_NAME=V_RELATIONSHIP_TYPE_NAME WHERE RELATIONSHIP_TYPE_ID=V_RELATIONSHIP_TYPE_ID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_TYPE_DELETE(IN V_RELATIONSHIP_TYPE_ID INTEGER) SPECIFIC RELATIONSHIP_TYPE_DELETE_10263 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIP_TYPE WHERE RELATIONSHIP_TYPE_ID=V_RELATIONSHIP_TYPE_ID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_TYPE_SELECT_ALL() SPECIFIC RELATIONSHIP_TYPE_SELECT_ALL_10265 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT RELATIONSHIP_TYPE_ID,RELATIONSHIP_TYPE_NAME FROM PUBLIC.RELATIONSHIP_TYPE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_INSERT(IN V_SCHEMA_ID INTEGER,IN V_PARENT_TABLE_ID INTEGER,IN V_CHILD_TABLE_ID INTEGER,IN V_RELATIONSHIP_ID INTEGER,IN V_RELATIONSHIP_TYPE_ID INTEGER) SPECIFIC RELATIONSHIP_INSERT_10266 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,RELATIONSHIP_TYPE_ID)VALUES(V_SCHEMA_ID,V_PARENT_TABLE_ID,V_CHILD_TABLE_ID,V_RELATIONSHIP_ID,V_RELATIONSHIP_TYPE_ID);END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_DELETE(IN V_SCHEMA_ID INTEGER,IN V_PARENT_TABLE_ID INTEGER,IN V_CHILD_TABLE_ID INTEGER,IN V_RELATIONSHIP_ID INTEGER) SPECIFIC RELATIONSHIP_DELETE_10267 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIP WHERE SCHEMA_ID=V_SCHEMA_ID AND PARENT_TABLE_ID=V_PARENT_TABLE_ID AND CHILD_TABLE_ID=V_CHILD_TABLE_ID AND RELATIONSHIP_ID=V_RELATIONSHIP_ID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECT(IN V_SCHEMA_ID INTEGER) SPECIFIC RELATIONSHIP_SELECT_10269 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,RELATIONSHIP_TYPE_ID FROM PUBLIC.RELATIONSHIP WHERE SCHEMA_ID=V_SCHEMA_ID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_MULTIPLE_SELECT(IN V_SCHEMA_ID INTEGER) SPECIFIC RELATIONSHIP_MULTIPLE_SELECT_10271 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,PARENT_TABLE_ID,B.TABLE_NAME AS PARENT,CHILD_TABLE_ID,C.TABLE_NAME AS CHILD,RELATIONSHIP_TYPE_ID,RELATIONSHIP_ID,D.RELATIONSHIP_TYPE_NAME FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASE_TABLE B,PUBLIC.DATABASE_TABLE C,PUBLIC.RELATIONSHIP_TYPE D WHERE SCHEMA_ID=V_SCHEMA_ID AND A.SCHEMA_ID=B.SCHEMA_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.RELATIONSHIP_TYPE_ID=D.RELATIONSHIP_TYPE_ID ORDER BY PARENT,RELATIONSHIP_TYPE_ID,CHILD;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_KEY_PAIR_INSERT(IN V_SCHEMA_ID INTEGER,IN V_PARENT_TABLE_ID INTEGER,IN V_CHILD_TABLE_ID INTEGER,IN V_RELATIONSHIP_ID INTEGER,IN V_PARENT_KEY_ID INTEGER,IN V_CHILD_KEY_ID INTEGER) SPECIFIC RELATIONSHIP_KEY_PAIR_INSERT_10272 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP_KEY_PAIR(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID)VALUES(V_SCHEMA_ID,V_PARENT_TABLE_ID,V_CHILD_TABLE_ID,V_RELATIONSHIP_ID,V_PARENT_KEY_ID,V_CHILD_KEY_ID);END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_KEY_PAIR_DELETE(IN V_SCHEMA_ID INTEGER,IN V_PARENT_TABLE_ID INTEGER,IN V_CHILD_TABLE_ID INTEGER,IN V_RELATIONSHIP_ID INTEGER,IN V_PARENT_KEY_ID INTEGER,IN V_CHILD_KEY_ID INTEGER) SPECIFIC RELATIONSHIP_KEY_PAIR_DELETE_10273 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.RELATIONSHIP_KEY_PAIR WHERE SCHEMA_ID=V_SCHEMA_ID AND PARENT_TABLE_ID=V_PARENT_TABLE_ID AND CHILD_TABLE_ID=V_CHILD_TABLE_ID AND RELATIONSHIP_ID=V_RELATIONSHIP_ID AND PARENT_KEY_ID=V_PARENT_KEY_ID AND CHILD_KEY_ID=V_CHILD_KEY_ID;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_KEY_PAIR_MULTIPLE_SELECT(IN V_SCHEMA_ID INTEGER,IN V_PARENT_TABLE_ID INTEGER,IN V_CHILD_TABLE_ID INTEGER,IN V_RELATIONSHIP_ID INTEGER) SPECIFIC RELATIONSHIP_KEY_PAIR_MULTIPLE_SELECT_10275 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID,B.TABLE_KEY_NAME AS PARENT,C.TABLE_KEY_NAME AS CHILD FROM PUBLIC.RELATIONSHIP_KEY_PAIR A,PUBLIC.TABLE_KEY B,PUBLIC.TABLE_KEY C WHERE SCHEMA_ID=V_SCHEMA_ID AND PARENT_TABLE_ID=V_PARENT_TABLE_ID AND CHILD_TABLE_ID=V_CHILD_TABLE_ID AND RELATIONSHIP_ID=V_RELATIONSHIP_ID AND A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.PARENT_KEY_ID=B.TABLE_KEY_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.CHILD_KEY_ID=C.TABLE_KEY_ID;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_SELECT_ONLY_NAMES(IN V_SCHEMA_ID INTEGER) SPECIFIC RELATIONSHIP_SELECT_ONLY_NAMES_10283 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT A.PARENT,A.CHILD,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT_KEY_NAME,A.CHILD_KEY_NAME FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,A.PARENT_KEY_ID,A.CHILD_KEY_ID,B.TABLE_KEY_NAME AS PARENT_KEY_NAME,C.TABLE_KEY_NAME AS CHILD_KEY_NAME FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,B.PARENT_KEY_ID,B.CHILD_KEY_ID FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,B.TABLE_NAME AS PARENT,C.TABLE_NAME AS CHILD FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASE_TABLE B,PUBLIC.DATABASE_TABLE C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.SCHEMA_ID=V_SCHEMA_ID)A,PUBLIC.RELATIONSHIP_KEY_PAIR B WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.PARENT_TABLE_ID AND A.CHILD_TABLE_ID=B.CHILD_TABLE_ID AND A.RELATIONSHIP_ID=B.RELATIONSHIP_ID)A,PUBLIC.TABLE_KEY B,PUBLIC.TABLE_KEY C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.PARENT_KEY_ID=B.TABLE_KEY_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.CHILD_KEY_ID=C.TABLE_KEY_ID)A;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.DATABASE_TABLE_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_SCHEMA_ID_NEW INTEGER) SPECIFIC DATABASE_TABLE_COPY_10285 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.DATABASE_TABLE(SCHEMA_ID,TABLE_ID,TABLE_NAME)SELECT V_SCHEMA_ID_NEW,TABLE_ID,TABLE_NAME FROM PUBLIC.DATABASE_TABLE WHERE SCHEMA_ID=V_SCHEMA_ID_OLD;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_COPY(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID_OLD INTEGER,IN V_TABLE_ID_NEW INTEGER) SPECIFIC TABLE_KEY_COPY_10287 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLE_KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER)SELECT SCHEMA_ID,V_TABLE_ID_NEW,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID AND TABLE_ID=V_TABLE_ID_OLD;END
CREATE PROCEDURE PUBLIC.TABLE_KEY_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_SCHEMA_ID_NEW INTEGER) SPECIFIC TABLE_KEY_COPY_10291 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.TABLE_KEY(SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER)SELECT V_SCHEMA_ID_NEW,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID_OLD;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_SCHEMA_ID_NEW INTEGER) SPECIFIC RELATIONSHIP_COPY_10289 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,RELATIONSHIP_TYPE_ID)SELECT V_SCHEMA_ID_NEW,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,RELATIONSHIP_TYPE_ID FROM PUBLIC.RELATIONSHIP WHERE SCHEMA_ID=V_SCHEMA_ID_OLD;END
CREATE PROCEDURE PUBLIC.RELATIONSHIP_KEY_PAIR_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_SCHEMA_ID_NEW INTEGER) SPECIFIC RELATIONSHIP_KEY_PAIR_COPY_10293 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.RELATIONSHIP_KEY_PAIR(SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID)SELECT V_SCHEMA_ID_NEW,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID FROM PUBLIC.RELATIONSHIP_KEY_PAIR WHERE SCHEMA_ID=V_SCHEMA_ID_OLD;END
CREATE PROCEDURE PUBLIC.TABLE_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_TABLE_ID_OLD INTEGER,IN V_TABLE_ID_NEW INTEGER,IN V_TABLE_NAME VARCHAR(16777216)) SPECIFIC TABLE_COPY_10294 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC CALL DATABASE_TABLE_INSERT(V_SCHEMA_ID_OLD,V_TABLE_ID_NEW,V_TABLE_NAME);CALL TABLE_KEY_COPY(V_SCHEMA_ID_OLD,V_TABLE_ID_OLD,V_TABLE_ID_NEW);END
CREATE PROCEDURE PUBLIC.SCHEMA_COPY(IN V_SCHEMA_ID_OLD INTEGER,IN V_SCHEMA_ID_NEW INTEGER,IN V_SCHEMA_NAME_NEW VARCHAR(16777216)) SPECIFIC SCHEMA_COPY_10295 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC CALL DATABASE_SCHEMA_INSERT(V_SCHEMA_ID_NEW,V_SCHEMA_NAME_NEW);CALL DATABASE_TABLE_COPY(V_SCHEMA_ID_OLD,V_SCHEMA_ID_NEW);CALL RELATIONSHIP_COPY(V_SCHEMA_ID_OLD,V_SCHEMA_ID_NEW);CALL TABLE_KEY_COPY(V_SCHEMA_ID_OLD,V_SCHEMA_ID_NEW);CALL RELATIONSHIP_KEY_PAIR_COPY(V_SCHEMA_ID_OLD,V_SCHEMA_ID_NEW);END
CREATE PROCEDURE PUBLIC.TABLE_KEY_SELECT_WITH_NAME(IN V_SCHEMAID INTEGER,IN V_TABLEID INTEGER) SPECIFIC TABLE_KEY_SELECT_WITH_NAME_10300 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,KEY_TYPE_NAME,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY A,PUBLIC.KEY_TYPE B WHERE A.TABLE_KEY_TYPE_ID=B.KEY_TYPE_ID AND SCHEMA_ID=V_SCHEMAID AND TABLE_ID=V_TABLEID ORDER BY TABLE_KEY_ORDER,TABLE_KEY_NAME;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.KEY_TYPE_SELECT_ALL() SPECIFIC KEY_TYPE_SELECT_ALL_10302 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT KEY_TYPE_ID,KEY_TYPE_NAME FROM PUBLIC.KEY_TYPE;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.SHOW_RELATIONSHIP(IN V_SCHEMA_ID INTEGER) SPECIFIC SHOW_RELATIONSHIP_10319 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT DISTINCT A.PARENT,A.CHILD,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,A.PARENT_KEY_ID,A.CHILD_KEY_ID,B.TABLE_KEY_NAME AS PARENT_KEY_NAME,C.TABLE_KEY_NAME AS CHILD_KEY_NAME FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,B.PARENT_KEY_ID,B.CHILD_KEY_ID FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,B.TABLE_NAME AS PARENT,C.TABLE_NAME AS CHILD FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASE_TABLE B,PUBLIC.DATABASE_TABLE C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.SCHEMA_ID=V_SCHEMA_ID)A,PUBLIC.RELATIONSHIP_KEY_PAIR B WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.PARENT_TABLE_ID AND A.CHILD_TABLE_ID=B.CHILD_TABLE_ID AND A.RELATIONSHIP_ID=B.RELATIONSHIP_ID)A,PUBLIC.TABLE_KEY B,PUBLIC.TABLE_KEY C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.PARENT_KEY_ID=B.TABLE_KEY_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.CHILD_KEY_ID=C.TABLE_KEY_ID)A;OPEN RESULT;END
CREATE PROCEDURE PUBLIC.SELECT_SCHEMA_AS_XML(OUT V_DOC VARCHAR(16777216),IN V_SCHEMA_ID INTEGER) SPECIFIC SELECT_SCHEMA_AS_XML_10321 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE DOC LONGVARCHAR;SET DOC='';SELECT'<schema>'+CHAR(10)+'<schema_id>'+SCHEMA_ID+'</schema_id>'+CHAR(10)+'<schema_name>'+SCHEMA_NAME+'</schema_name>'+CHAR(10)+'</schema>'INTO DOC FROM PUBLIC.DATABASE_SCHEMA WHERE SCHEMA_ID=V_SCHEMA_ID;SET V_DOC=DOC+CHAR(10);END
CREATE PROCEDURE PUBLIC.SELECT_TABLE_LIST_AS_XML(OUT V_DOC VARCHAR(16777216),IN V_SCHEMA_ID INTEGER) SPECIFIC SELECT_TABLE_LIST_AS_XML_10325 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE DOC LONGVARCHAR;DECLARE DOC2 LONGVARCHAR;SET DOC='';SET DOC2='';SELECT'<table_list>'INTO DOC FROM(VALUES(0));SET DOC2=DOC2+DOC+CHAR(10);SET DOC='';FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_NAME FROM PUBLIC.DATABASE_TABLE WHERE SCHEMA_ID=V_SCHEMA_ID DO SET DOC=DOC+'<table>'+CHAR(10)+'<schema_id>'+SCHEMA_ID+'</schema_id>'+CHAR(10)+'<table_id>'+TABLE_ID+'</table_id>'+CHAR(10)+'<table_name>'+TABLE_NAME+'</table_name>'+CHAR(10)+'</table>'+CHAR(10);SET DOC2=DOC2+DOC;SET DOC='';END FOR;SET DOC='</table_list>';SET V_DOC=DOC2+DOC+CHAR(10);END
CREATE PROCEDURE PUBLIC.SELECT_KEY_LIST_AS_XML(OUT V_DOC VARCHAR(16777216),IN V_SCHEMA_ID INTEGER) SPECIFIC SELECT_KEY_LIST_AS_XML_10329 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE DOC LONGVARCHAR;DECLARE DOC2 LONGVARCHAR;SET DOC='';SET DOC2='';SELECT'<key_list>'INTO DOC FROM(VALUES(0));SET DOC2=DOC2+DOC+CHAR(10);SET DOC='';FOR SELECT SCHEMA_ID,TABLE_ID,TABLE_KEY_ID,TABLE_KEY_NAME,TABLE_KEY_LABEL,LCASE(CAST(TABLE_KEY_IS_PK AS LONGVARCHAR))AS TABLE_KEY_IS_PK,TABLE_KEY_TYPE_ID,TABLE_KEY_ORDER FROM PUBLIC.TABLE_KEY WHERE SCHEMA_ID=V_SCHEMA_ID DO SET DOC=DOC+'<key>'+CHAR(10)+'<schema_id>'+SCHEMA_ID+'</schema_id>'+CHAR(10)+'<table_id>'+TABLE_ID+'</table_id>'+CHAR(10)+'<key_id>'+TABLE_KEY_ID+'</key_id>'+CHAR(10)+'<key_name>'+TABLE_KEY_NAME+'</key_name>'+CHAR(10)+'<key_label>'+TABLE_KEY_LABEL+'</key_label>'+CHAR(10)+'<key_is_pk>'+TABLE_KEY_IS_PK+'</key_is_pk>'+CHAR(10)+'<key_type_id>'+TABLE_KEY_TYPE_ID+'</key_type_id>'+CHAR(10)+'<key_order>'+TABLE_KEY_ORDER+'</key_order>'+CHAR(10)+'</key>'+CHAR(10);SET DOC2=DOC2+DOC;SET DOC='';END FOR;SET DOC='</key_list>';SET V_DOC=DOC2+DOC+CHAR(10);END
CREATE PROCEDURE PUBLIC.SELECT_RELATIONSHIP_LIST_AS_XML(OUT V_DOC VARCHAR(16777216),IN V_SCHEMA_ID INTEGER) SPECIFIC SELECT_RELATIONSHIP_LIST_AS_XML_10331 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE DOC LONGVARCHAR;DECLARE DOC2 LONGVARCHAR;SET DOC2='<relationship_list>'+CHAR(10);SET DOC='';FOR SELECT SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,RELATIONSHIP_TYPE_ID FROM PUBLIC.RELATIONSHIP WHERE SCHEMA_ID=V_SCHEMA_ID DO SET DOC='<relationship>'+CHAR(10)+'<schema_id>'+SCHEMA_ID+'</schema_id>'+CHAR(10)+'<parent_table_id>'+PARENT_TABLE_ID+'</parent_table_id>'+CHAR(10)+'<child_table_id>'+CHILD_TABLE_ID+'</child_table_id>'+CHAR(10)+'<relationship_id>'+RELATIONSHIP_ID+'</relationship_id>'+CHAR(10)+'<relationship_type_id>'+RELATIONSHIP_TYPE_ID+'</relationship_type_id>'+CHAR(10)+'</relationship>'+CHAR(10);SET DOC2=DOC2+DOC;END FOR;SET V_DOC=DOC2+'</relationship_list>'+CHAR(10);END
CREATE PROCEDURE PUBLIC.SELECT_KEY_PAIR_LIST_AS_XML(OUT V_DOC VARCHAR(16777216),IN V_SCHEMA_ID INTEGER) SPECIFIC SELECT_KEY_PAIR_LIST_AS_XML_10333 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE DOC LONGVARCHAR;DECLARE DOC2 LONGVARCHAR;SET DOC2='<key_pair_list>'+CHAR(10);SET DOC='';FOR SELECT SCHEMA_ID,PARENT_TABLE_ID,CHILD_TABLE_ID,RELATIONSHIP_ID,PARENT_KEY_ID,CHILD_KEY_ID FROM PUBLIC.RELATIONSHIP_KEY_PAIR WHERE SCHEMA_ID=V_SCHEMA_ID DO SET DOC='<key_pair>'+CHAR(10)+'<schema_id>'+SCHEMA_ID+'</schema_id>'+CHAR(10)+'<parent_table_id>'+PARENT_TABLE_ID+'</parent_table_id>'+CHAR(10)+'<child_table_id>'+CHILD_TABLE_ID+'</child_table_id>'+CHAR(10)+'<relationship_id>'+RELATIONSHIP_ID+'</relationship_id>'+CHAR(10)+'<parent_key_id>'+PARENT_KEY_ID+'</parent_key_id>'+CHAR(10)+'<child_key_id>'+CHILD_KEY_ID+'</child_key_id>'+CHAR(10)+'</key_pair>'+CHAR(10);SET DOC2=DOC2+DOC;END FOR;SET V_DOC=DOC2+'</key_pair_list>'+CHAR(10);END
CREATE PROCEDURE PUBLIC.EXPORT_XML(IN V_SCHEMA_ID INTEGER) SPECIFIC EXPORT_XML_10336 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL  DYNAMIC RESULT SETS 1 BEGIN ATOMIC DECLARE TABLE TEMP(TXT LONGVARCHAR);DECLARE DOC LONGVARCHAR;DECLARE DOC2 LONGVARCHAR;SET DOC2='<potatosql'+CHAR(10)+'xmlns:xsi=''http://www.w3.org/2001/XMLSchema-instance'''+CHAR(10)+'xsi:noNamespaceSchemaLocation=''https://xjrga.github.io/schemas/potatosql.xsd''>'+CHAR(10);SET DOC='';CALL SELECT_SCHEMA_AS_XML(DOC,V_SCHEMA_ID);SET DOC2=DOC2+DOC;CALL SELECT_TABLE_LIST_AS_XML(DOC,V_SCHEMA_ID);SET DOC2=DOC2+DOC;CALL SELECT_KEY_LIST_AS_XML(DOC,V_SCHEMA_ID);SET DOC2=DOC2+DOC;CALL SELECT_RELATIONSHIP_LIST_AS_XML(DOC,V_SCHEMA_ID);SET DOC2=DOC2+DOC;CALL SELECT_KEY_PAIR_LIST_AS_XML(DOC,V_SCHEMA_ID);SET DOC2=DOC2+DOC+'</potatosql>';INSERT INTO TEMP(TXT)VALUES(DOC2);BEGIN ATOMIC DECLARE RESULT CURSOR FOR SELECT TXT FROM TEMP;OPEN RESULT;END;END
CREATE FUNCTION PUBLIC.IS_IT_A_DEPENDENT_TABLE(IN V_SCHEMA_ID INTEGER,IN V_TABLE_ID INTEGER) RETURNS BOOLEAN SPECIFIC IS_IT_A_DEPENDENT_TABLE_10311 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC DECLARE V_IS_DEPENDENT BOOLEAN;SELECT CASE WHEN COUNT(DISTINCT A.CHILD)>0 THEN TRUE ELSE FALSE END INTO V_IS_DEPENDENT FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,A.PARENT_KEY_ID,A.CHILD_KEY_ID,B.TABLE_KEY_NAME AS PARENT_KEY_NAME,C.TABLE_KEY_NAME AS CHILD_KEY_NAME FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,A.PARENT,A.CHILD,B.PARENT_KEY_ID,B.CHILD_KEY_ID FROM(SELECT A.SCHEMA_ID,A.PARENT_TABLE_ID,A.CHILD_TABLE_ID,A.RELATIONSHIP_ID,A.RELATIONSHIP_TYPE_ID,B.TABLE_NAME AS PARENT,C.TABLE_NAME AS CHILD FROM PUBLIC.RELATIONSHIP A,PUBLIC.DATABASE_TABLE B,PUBLIC.DATABASE_TABLE C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.SCHEMA_ID=V_SCHEMA_ID AND A.CHILD_TABLE_ID=V_TABLE_ID)A,PUBLIC.RELATIONSHIP_KEY_PAIR B WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.PARENT_TABLE_ID AND A.CHILD_TABLE_ID=B.CHILD_TABLE_ID AND A.RELATIONSHIP_ID=B.RELATIONSHIP_ID AND A.RELATIONSHIP_TYPE_ID=0)A,PUBLIC.TABLE_KEY B,PUBLIC.TABLE_KEY C WHERE A.SCHEMA_ID=B.SCHEMA_ID AND A.PARENT_TABLE_ID=B.TABLE_ID AND A.PARENT_KEY_ID=B.TABLE_KEY_ID AND A.SCHEMA_ID=C.SCHEMA_ID AND A.CHILD_TABLE_ID=C.TABLE_ID AND A.CHILD_KEY_ID=C.TABLE_KEY_ID)A;RETURN V_IS_DEPENDENT;END
ALTER TABLE PUBLIC.TABLE_KEY ADD CONSTRAINT R6_KEY_TYPE_TABLE_KEY FOREIGN KEY(TABLE_KEY_TYPE_ID) REFERENCES PUBLIC.KEY_TYPE(KEY_TYPE_ID) ON DELETE SET NULL
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO KEY_TYPE VALUES(0,'INTEGER')
INSERT INTO KEY_TYPE VALUES(1,'DOUBLE')
INSERT INTO KEY_TYPE VALUES(2,'STRING')
INSERT INTO KEY_TYPE VALUES(3,'DATE')
INSERT INTO KEY_TYPE VALUES(4,'BOOLEAN')
INSERT INTO KEY_TYPE VALUES(5,'TIME')
INSERT INTO KEY_TYPE VALUES(6,'TIMESTAMP')
INSERT INTO RELATIONSHIP_TYPE VALUES(0,'Identifying')
INSERT INTO RELATIONSHIP_TYPE VALUES(1,'Nonidentifying')
